##########################
# Functions
#########################

github () {
    git clone --recurse-submodules "git@github.com:$@"
}

branch-clean () {
    git checkout --orphan "$1"
    git rm --cached $(git ls-files)
}

frm () {
    find . -path "$1" -print0 | xargs -0 rm
}

new-domain() {
    ssh shc -t "sudo new-domain $1"
}

pskill() {
    ps -e | grep -v grep | grep "$1" | awk '{print $1}' | xargs \kill
}

display_error() {
    echo "$fg[red]$1$reset_color"
}

rename() {
    for i in *"$1"*; do
        echo "$i" | sed "s/$1/$2/" | xargs mv "$i"
    done
}

frename() {
    for i in `where "*$1*"`; do
        echo "$i" | sed "s/$1/$2/" | xargs mv "$i"
    done
}

scp() {
    rsync -a -P --exclude=".svn/" --exclude=".git/" --rsh=ssh "$1" "$2"
}

dup() {
    rsync -acipuP "$1" "$2"
}

ours() {
    git checkout --ours "$1" && git add "$1"
}

theirs() {
    git checkout --theirs "$1" && git add "$1"
}

git-undelete() {
    git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"
}

png() {
    dt="$1"
    name=$(echo "$dt" | cut -f 1 -d '.')
    dot -Tpng -Gdpi=300 "$dt" > "$name.png"
}


log() {
    git log --color --graph --pretty=format:'%Cgreen%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit $@ | cat -n | less
}

# Lowercase
lowercase() {
    find $1 -type f | while read name;
        do loName=$(echo "${name}" | tr '[:upper:]' '[:lower:]')
        mv "$name" "$loName"
    done
}

# Log a file with mac notifications
logit () {
    clear
    tail -F $1 | while read line; do
        echo "$line"
    done
}

# Touch, but creates directories if they don't exist
create () {
    dir=$(dirname "$1")/

    if [[ -n $dir && ! (-d $dir) ]]
        then mkdir -p "$dir"
        echo "Creating directory: $dir"
    fi

    for i do
        \touch $i
    done
}

# Copy In Place: Copies file from directory to same directory
cpip () {
    dir=$(dirname "$1")/

    for i do
        if [[ $i != $1 ]]; then
            cp -v -n "$1" "$dir$i"
        fi
    done
}

# Move In Place: Moves file in directory to same directory
mvip () {
    dir=$(dirname "$1")/
    mv -n -v "$1" "$dir$2"
}

# Tmux Layout: displays the current Tmux window layout and adds it to the clipboard
layout () {
    tmux list-windows | awk '{print $7}' |  sed 's/\]$//' | pbcopy
    pbpaste
    echo '[tmux layout copied to clipboard]'
}

# Stops the current Tmux session and closes any Vagrant/docker machines that might be running
stop () {
    git push 2> /dev/null
    vagrant halt 2> /dev/null
    docker-compose stop 2> /dev/null
    tmux kill-session -t "$(tmux display-message -p '#S')"
}

# Runs a single command in Vagrant SSH
vssh () {
    command="$@"
    ssh -t vagrant "cd /var/www && $command"
}

vsshd () {
    dir="$1"
    command="${@:2}"
    ssh -t vagrant "cd /var/www/$1 && $command"
}

# Finds a given filename in children directories
where() {
    find . -type f -name "*$1*" -not -path \*node_modules\* | sed 's/^\.\///'
}

infile() {
    find . -type f -exec grep -il "$1" {} \;
}

# Number of changed files in git commit
cfcount() {
    git diff-tree --no-commit-id --name-only -r $1 | wc -l
}

restore() {
    commit=$(git rev-list -n 1 HEAD -- "$1")
    git checkout "$commit" -- "$1"
}

# Git Show
show() {
    if [[ $# -eq 1 ]]; then
        git show HEAD@{$1}
    else
        git show HEAD
    fi
}

# SSH list
ssh-list() {
    for keyfile in ~/.ssh/keys/**
        do ssh-keygen -l -f "${keyfile}"
    done | uniq
}

# Register Virtual Box VMs
register-vms() {
    ls ~/VirtualBox\ VMs/**/*.vbox | while read vm; do VBoxManage registervm "$vm"; done;
}

# Markdown to Slides
slides() {
    md="$1"
    name=$(echo "$md" | cut -f 1 -d '.')
    additional="${@:2}"
    markdown-to-slides -i "$md" -o "$name-slides.html" -l ~/.markdown-to-slides/template-portable.html -s ~/.markdown-to-slides/slides.css -j ~/.markdown-to-slides/slides.js additional
}

slides-local() {
    md="$1"
    name=$(echo "$md" | cut -f 1 -d '.')
    additional="${@:2}"
    markdown-to-slides -i "$md" -o "$name-slides.html" -l ~/.markdown-to-slides/template-local.html -s ~/.markdown-to-slides/slides.css -j ~/.markdown-to-slides/slides.js additional
}


# markdown to HTML
html() {
    file="$1"
    name=$(echo "$file" | cut -f 1 -d '.')
    ext="$2" 

    if [ -z "$ext" ]; then
        display_error "Extension required"
        return
    fi

    grip "$file" --export "$name-$ext.html"
}

# coding fellowship notes/slides
notes() {
    for i in *.md; do
        name=$(echo "$file" | cut -f 1 -d '.')
        html "$i" "notes"
        slides "$i"
        open -a "Google Chrome" "$name-slides.html"
    done

    open ./
}

complete() {
    f="$1"
    mv "$HOME/.tmuxinator/$f.yml" "$HOME/.tmuxinator/completed/$f.yml"
}

# git commit
m() {
    if [ -z "$1" ]; then
        display_error "Description required"
        return
    fi

    printf "Type: "
    select opt in "feat" "fix" "docs" "style" "refactor" "test" "chore";
    do
        printf "Scope: "
        read scope
        git commit -m "$opt ($scope): $1"
        return
    done
}
