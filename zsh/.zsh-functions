##########################
# Functions
#########################

github () {
    git clone --recurse-submodules "git@github.com:$@"
}

branch-clean () {
    git checkout --orphan "$1"
    git rm --cached $(git ls-files)
}

frm () {
    find . -path "$1" -print0 | xargs -0 rm
}

new-domain() {
    ssh shc -t "sudo new-domain $1"
}

server() {
    if [[ $# -eq 1 ]]; then
        php -S localhost:"$1"
    else
        php -S localhost:8000
    fi
}

pskill() {
    ps -e | grep -v grep | grep "$1" | awk '{print $1}' | xargs \kill
}

display_error() {
    echo "$fg[red]$1$reset_color"
}

rename() {
    for i in *"$1"*; do
        echo "$i" | sed "s/$1/$2/" | xargs mv "$i"
    done
}

frename() {
    for i in `where "*$1*"`; do
        echo "$i" | sed "s/$1/$2/" | xargs mv "$i"
    done
}

scp() {
    rsync -a --partial --exclude=".svn/" --exclude=".git/" --progress --rsh=ssh "$1" "$2"
}

ours() {
    git checkout --ours "$1" && git add "$1"
}

theirs() {
    git checkout --theirs "$1" && git add "$1"
}

git-undelete() {
    git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"
}


log() {
    git log --color --graph --pretty=format:'%Cgreen%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit $@ | cat -n | less
}

# Lowercase
lowercase() {
    find $1 -type f | while read name;
        do loName=$(echo "${name}" | tr '[:upper:]' '[:lower:]')
        mv "$name" "$loName"
    done
}

# Log a file with mac notifications
# run `brew install terminal-notifier` to install terminal-notifier
logit () {
    clear
    tail -F $1 | while read line; do
        echo "$line"
        # echo "$line" | sed $'s/$/\a/' # Emit the bell sound
        # echo "$line" | sed 's/[[:space:]]/\\ /g' | xargs -n 1 terminal-notifier -title $2 -message # Show in notification centre
    done
}

# Touch, but creates directories if they don't exist
create () {
    dir=$(dirname "$1")/

    if [[ -n $dir && ! (-d $dir) ]]
        then mkdir -p "$dir"
        echo "Creating directory: $dir"
    fi

    for i do
        \touch $i
    done
}

# Laravel: create file in app and tests directory
lt () {
    filename="$@"
    create "app/${filename}.php"
    create "tests/${filename}Test.php"
}

# Copy In Place: Copies file from directory to same directory
cpip () {
    dir=$(dirname "$1")/

    for i do
        if [[ $i != $1 ]]; then
            cp -v -n "$1" "$dir$i"
        fi
    done
}

# Move In Place: Moves file in directory to same directory
mvip () {
    dir=$(dirname "$1")/
    mv -n -v "$1" "$dir$2"
}

# Tmux Layout: displays the current Tmux window layout and adds it to the clipboard
layout () {
    tmux list-windows | awk '{print $7}' |  sed 's/\]$//' | pbcopy
    pbpaste
    echo '[tmux layout copied to clipboard]'
}

# Creates a new Tmux session from within an existing Tmux session
tnew () {
    if [[ $# -eq 1 ]]; then
        TMUX= tmux new-session -d -s $1
        tmux switch-client -t $1
        cd ~
    else
        display_error 'Session name required'
    fi
}

_stop() {
    git push 2> /dev/null
    vagrant "$1" 2> /dev/null
    tmux kill-session -t "$(tmux display-message -p '#S')"
}

# Stops the current Tmux session and closes any Vagrant machines that might be running
stop () {
    _stop "halt"
}

# Stops the current Tmux session and destroys any Vagrant machines that might be running
finish () {
    _stop "destroy"
}

# Runs a single command in Vagrant SSH
vssh () {
    command="$@"
    ssh -t vagrant "cd /var/www && $command"
}

vsshd () {
    dir="$1"
    command="${@:2}"
    ssh -t vagrant "cd /var/www/$1 && $command"
}

# Finds a given filename in children directories
where() {
    find . -type f -name "*$1*" -not -path \*node_modules\* | sed 's/^\.\///'
}

infile() {
    find . -type f -exec grep -il "$1" {} \;
}

# Number of changed files in git commit
cfcount() {
    git diff-tree --no-commit-id --name-only -r $1 | wc -l
}

restore() {
    commit=$(git rev-list -n 1 HEAD -- "$1")
    git checkout "$commit" -- "$1"
}

# Git Show
show() {
    if [[ $# -eq 1 ]]; then
        git show HEAD@{$1}
    else
        git show HEAD
    fi
}

# SSH list
ssh-list() {
    for keyfile in ~/.ssh/keys/**
        do ssh-keygen -l -f "${keyfile}"
    done | uniq
}

# Register Virtual Box VMs
register-vms() {
    ls ~/VirtualBox\ VMs/**/*.vbox | while read vm; do VBoxManage registervm "$vm"; done;
}

# Markdown to Slides
slides() {
    md="$1"
    name=$(echo "$md" | cut -f 1 -d '.')
    command="${@:2}"
    markdown-to-slides "$md" -o "$name".html -l ~/.markdown-to-slides/template.html -s ~/.markdown-to-slides/slides.css -j ~/.markdown-to-slides/slides.js "$command"
}

# remove old casks
function __clean-cask {
    caskBasePath="/usr/local/Caskroom"
    local cask="$1"
    local caskDirectory="$caskBasePath/$cask"
    local versionsToRemove="$(ls -r $caskDirectory | sed 1,1d)"
    if [[ -n $versionsToRemove ]]; then
        while read versionToRemove ; do
            echo "Removing $cask $versionToRemove..."
            rm -rf "$caskDirectory/$versionToRemove"
        done <<< "$versionsToRemove"
    fi
}

#call this command to cleanup all, or you can specify cask name
function cask-retire {
  if [[ $# -eq 0 ]]; then
      while read cask; do
          __clean-cask "$cask"
      done <<< "$(brew cask list)"
  else
      clean-cask "$1"
  fi
}
